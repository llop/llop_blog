<pre><span class="comment">/** @file Cochera.cpp
 *  @brief Implementacion de la clase Cochera
 */</span><span class="pre">
#include "Cochera.hpp"
</span><span class="comment">
/* Clase Cochera
 * Representa una cochera
 * Una cochera se caracteriza por una via muerta donde poner los vagones de un tren, y la capacidad de esta.
 */

/* Constructora */
/** @brief Creadora por defecto.
 *  \pre cierto
 *  \post El resultado es una cochera sin datos.
 */</span>
Cochera<span class="operator">::</span>Cochera<span class="operator">() {
}</span><span class="comment">

/* Consultoras */
/** @brief Devuelve cuantos huecos quedan en la via muerta.
 *  \pre cierto
 *  \post Retorna la capacidad.
 */</span><span class="type">
int</span> Cochera<span class="operator">::</span>get_espacios_libres<span class="operator">()</span><span class="keyword"> const</span><span class="operator"> {</span><span class="flow">
  return</span> _capacidad<span class="operator"> -</span> _via_muerta<span class="operator">.</span>size<span class="operator">();
}</span><span class="comment">

/* Modificadoras */
/** @brief Anade los vagones a la via muerta.
  *  \pre cierto
  *  \post Los vagones estan en la via muerta.
  */</span><span class="type">
void</span> Cochera<span class="operator">::</span>anadir_vagones<span class="operator">(</span>queue<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>vagones<span class="operator">) {</span><span class="flow">
  while</span><span class="operator"> (</span><span class="operator">not</span> vagones<span class="operator">.</span>empty<span class="operator">()) {</span>

    _via_muerta<span class="operator">.</span>push<span class="operator">(</span>vagones<span class="operator">.</span>front<span class="operator">());</span>
    vagones<span class="operator">.</span>pop<span class="operator">();
  }
}</span><span class="comment">
/** @brief Anade los vagones a la via muerta. La via auxiliar queda vacia.
 *  \pre cierto
 *  \post Los vagones estan en la via muerta, y la auxiliar esta vacia.
 */</span><span class="type">

void</span> Cochera<span class="operator">::</span>anadir_vagones<span class="operator">(</span>stack<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>via_auxiliar<span class="operator">) {</span><span class="flow">
  while</span><span class="operator"> (</span><span class="operator">not</span> via_auxiliar<span class="operator">.</span>empty<span class="operator">()) {</span>

    _via_muerta<span class="operator">.</span>push<span class="operator">(</span>via_auxiliar<span class="operator">.</span>top<span class="operator">());</span>
    via_auxiliar<span class="operator">.</span>pop<span class="operator">();
  }
}</span><span class="comment">
/** @brief Forma el tren cuyos vagones estan 'vagones'.
 *  Los movimientos ejecutados para formar los vagones encontrados en la cochera se escriben en el canal estandar de salida.
 *  \pre cierto
 *  \post Los vagones del tren encontrados se han quitado de la cochera.
 */</span><span class="type">

void</span> Cochera<span class="operator">::</span>formar_tren<span class="operator">(</span>queue<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>vagones<span class="operator">,</span> stack<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>via_auxiliar<span class="operator">) {</span><span class="type">

  bool</span> no_hay_mas<span class="operator"> =</span><span class="bool"> false</span><span class="operator">;</span><span class="flow">
  while</span><span class="operator"> (</span><span class="operator">not</span> vagones<span class="operator">.</span>empty<span class="operator">()</span><span class="operator"> and</span><span class="operator"> (</span><span class="operator">not</span> _via_muerta<span class="operator">.</span>empty<span class="operator">()</span><span class="operator"> or not</span> via_auxiliar<span class="operator">.</span>empty<span class="operator">())</span><span class="operator"> and not</span> no_hay_mas<span class="operator">) {</span><span class="type">

    int</span> vagon<span class="operator"> =</span> vagones<span class="operator">.</span>front<span class="operator">();</span><span class="comment">
    // Cuenta de los movimientos necesarios para llegar al vagon buscado en ambas vias
</span><span class="type">    int</span> movimientos_via_muerta<span class="operator"> =</span> cuenta_movimientos<span class="operator">(</span>vagon<span class="operator">,</span> _via_muerta<span class="operator">,</span><span class="int"> 0</span><span class="operator">);</span><span class="type">

    int</span> movimientos_via_auxiliar<span class="operator"> =</span> cuenta_movimientos<span class="operator">(</span>vagon<span class="operator">,</span> via_auxiliar<span class="operator">,</span><span class="int"> 0</span><span class="operator">);</span><span class="comment">

    // booleanos para controlar la accion
</span><span class="type">    bool</span> via_muerta_tiene<span class="operator"> =</span> movimientos_via_muerta<span class="operator"> &lt;</span> _via_muerta<span class="operator">.</span>size<span class="operator">();</span><span class="type">

    bool</span> via_auxiliar_tiene<span class="operator"> =</span> movimientos_via_auxiliar<span class="operator"> &lt;</span> via_auxiliar<span class="operator">.</span>size<span class="operator">();</span><span class="flow">
    if</span><span class="operator"> (</span>via_muerta_tiene<span class="operator"> or</span> via_auxiliar_tiene<span class="operator">) {</span><span class="comment">

      // Si ambas vias tienen el vagon, hay que pillarlo de la que menos movimientos se necesiten; si no, de la que lo tenga
      // Hay que sumar 1 a los movimientos de la via auxiliar porque hay que contar el movimiento de pasar el vagon a la via muerta
</span><span class="type">      bool</span> ambas_tienen<span class="operator"> =</span> via_muerta_tiene<span class="operator"> and</span> via_auxiliar_tiene<span class="operator">;</span><span class="flow">
      if</span><span class="operator"> ((</span>ambas_tienen<span class="operator"> and</span> movimientos_via_muerta<span class="operator"> &lt;</span> movimientos_via_auxiliar<span class="operator"> +</span><span class="int"> 1</span><span class="operator">)</span><span class="operator"> or</span><span class="operator">

	  (</span>via_muerta_tiene<span class="operator"> and not</span> via_auxiliar_tiene<span class="operator">))</span>
	mueve_desde_via_muerta<span class="operator">(</span>vagon<span class="operator">,</span> via_auxiliar<span class="operator">);</span><span class="flow">

      else</span> mueve_desde_via_auxiliar<span class="operator">(</span>vagon<span class="operator">,</span> via_auxiliar<span class="operator">);</span>
      vagones<span class="operator">.</span>pop<span class="operator">();
    }</span><span class="flow"> else</span> no_hay_mas<span class="operator"> =</span><span class="bool"> true</span><span class="operator">;
  }
}</span><span class="comment">

/** @brief Retorna la profundidad a la que se encuentra vagon en la pila.
 *  \pre cierto
 *  \post Retorna la profundidad.
 */</span><span class="type">
int</span> Cochera<span class="operator">::</span>cuenta_movimientos<span class="operator">(</span><span class="type">int</span> vagon<span class="operator">,</span> stack<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>via<span class="operator">,</span><span class="type"> int</span> profundidad<span class="operator">) {</span><span class="type">

  int</span> cuenta<span class="operator"> =</span> profundidad<span class="operator">;</span><span class="flow">
  if</span><span class="operator"> (</span><span class="operator">not</span> via<span class="operator">.</span>empty<span class="operator">()) {</span><span class="type">

    int</span> vagon_via<span class="operator"> =</span> via<span class="operator">.</span>top<span class="operator">();</span><span class="flow">
    if</span><span class="operator"> (</span>vagon<span class="operator"> !=</span> vagon_via<span class="operator">) {</span>

      via<span class="operator">.</span>pop<span class="operator">();</span>
      cuenta<span class="operator"> =</span> cuenta_movimientos<span class="operator">(</span>vagon<span class="operator">,</span> via<span class="operator">,</span> profundidad<span class="operator"> +</span><span class="int"> 1</span><span class="operator">);</span>

      via<span class="operator">.</span>push<span class="operator">(</span>vagon_via<span class="operator">);
    }
  }</span><span class="flow">
  return</span> cuenta<span class="operator">;
}</span><span class="comment">
/** @brief Mueve vagones desde la via1 hasta la via2, hasta encontrar 'vagon' en la via1.
 *  \pre cierto
 *  \post La via auxiliar tiene los vagones que habia en la muerta hasta 'vagon'.
 */</span><span class="type">
void</span> Cochera<span class="operator">::</span>mueve_de_via_a_via<span class="operator">(</span><span class="type">int</span> vagon<span class="operator">,</span> stack<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>via1<span class="operator">,</span> stack<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>via2<span class="operator">,</span><span class="type"> int</span> tipo_movimiento<span class="operator">) {</span><span class="flow">

  while</span><span class="operator"> (</span>via1<span class="operator">.</span>top<span class="operator">() !=</span> vagon<span class="operator">) {</span>
    via2<span class="operator">.</span>push<span class="operator">(</span>via1<span class="operator">.</span>top<span class="operator">());</span>

    cout<span class="operator"> &lt;&lt;</span> tipo_movimiento<span class="operator"> &lt;&lt;</span><span class="string"> " "</span><span class="operator"> &lt;&lt;</span> via1<span class="operator">.</span>top<span class="operator">() &lt;&lt;</span><span class="string"> "  "</span><span class="operator">;</span>

    via1<span class="operator">.</span>pop<span class="operator">();
  }
}</span><span class="comment">
/** @brief Mueve vagones desde la via muerta hasta la auxiliar, hasta encontrar 'vagon' en la via muerta.
 *  \pre cierto
 *  \post La via auxiliar tiene los vagones que habia en la muerta hasta 'vagon'.
 */</span><span class="type">
void</span> Cochera<span class="operator">::</span>mueve_desde_via_muerta<span class="operator">(</span><span class="type">int</span> vagon<span class="operator">,</span> stack<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>via_auxiliar<span class="operator">) {</span>

  mueve_de_via_a_via<span class="operator">(</span>vagon<span class="operator">,</span> _via_muerta<span class="operator">,</span> via_auxiliar<span class="operator">,</span><span class="int"> 2</span><span class="operator">);</span>
  cout<span class="operator"> &lt;&lt;</span><span class="string"> "1 "</span><span class="operator"> &lt;&lt;</span> _via_muerta<span class="operator">.</span>top<span class="operator">() &lt;&lt;</span><span class="string"> "  "</span><span class="operator">;</span>

  _via_muerta<span class="operator">.</span>pop<span class="operator">();
}</span><span class="comment">
/** @brief Mueve vagones desde la via auxiliar hasta la muerta, hasta encontrar 'vagon' en la via auxiliar.
 *  \pre cierto
 *  \post La via muerta tiene los vagones que habia en la auxiliar hasta 'vagon'.
 */</span><span class="type">
void</span> Cochera<span class="operator">::</span>mueve_desde_via_auxiliar<span class="operator">(</span><span class="type">int</span> vagon<span class="operator">,</span> stack<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>via_auxiliar<span class="operator">) {</span>

  mueve_de_via_a_via<span class="operator">(</span>vagon<span class="operator">,</span> via_auxiliar<span class="operator">,</span> _via_muerta<span class="operator">,</span><span class="int"> 3</span><span class="operator">);</span>
  cout<span class="operator"> &lt;&lt;</span><span class="string"> "3 "</span><span class="operator"> &lt;&lt;</span> via_auxiliar<span class="operator">.</span>top<span class="operator">() &lt;&lt;</span><span class="string"> "  1 "</span><span class="operator"> &lt;&lt;</span> via_auxiliar<span class="operator">.</span>top<span class="operator">() &lt;&lt;</span><span class="string"> "  "</span><span class="operator">;</span>

  via_auxiliar<span class="operator">.</span>pop<span class="operator">();
}</span><span class="comment">
/* Lectura y escritura */
/** @brief Se leen los datos de la cochera del canal estandar de entrada.
 *  \pre cierto
 *  \post Los datos del parametro implicito son los leidos de la entrada.
 */</span><span class="type">
void</span> Cochera<span class="operator">::</span>leer_cochera<span class="operator">() {</span>
  _capacidad<span class="operator"> =</span> readint<span class="operator">();
}</span><span class="comment">

/** @brief Escribe los vagones en la via muerta por orden de antiguedad.
 *  \pre cierto
 *  \post Los vagones en la via muerta se han escrito en el canal estandar de salida.
 */</span><span class="type">
void</span> Cochera<span class="operator">::</span>escribir_cochera<span class="operator">() {</span>
  escribir_cochera_recursivo<span class="operator">(</span>_via_muerta<span class="operator">);
}</span><span class="comment">
/** @brief Escribe los vagones en la via muerta por orden de antiguedad utilizando recursividad.
 *  \pre cierto
 *  \post Los vagones en la via muerta se han escrito en el canal estandar de salida.
 */</span><span class="type">

void</span> Cochera<span class="operator">::</span>escribir_cochera_recursivo<span class="operator">(</span>stack<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>via_muerta<span class="operator">) {</span><span class="flow">
  if</span><span class="operator"> (</span><span class="operator">not</span> via_muerta<span class="operator">.</span>empty<span class="operator">()) {</span><span class="type">

    int</span> vagon<span class="operator"> =</span> via_muerta<span class="operator">.</span>top<span class="operator">();</span>
    via_muerta<span class="operator">.</span>pop<span class="operator">();</span>

    escribir_cochera_recursivo<span class="operator">(</span>via_muerta<span class="operator">);</span>
    cout<span class="operator"> &lt;&lt;</span> vagon<span class="operator"> &lt;&lt;</span><span class="char"> ' '</span><span class="operator">;</span>
    via_muerta<span class="operator">.</span>push<span class="operator">(</span>vagon<span class="operator">);
  }
}</span>
</pre>