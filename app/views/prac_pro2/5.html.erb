<pre><span class="comment">/** @file Red.cpp
 *  @brief Implementacion de la clase Red
 */</span><span class="pre">
#include "Red.hpp"
</span><span class="comment">
/* Clase Red
 * Representa una red
 * La red tiene una estructura de arbol binario completo de n niveles, en que cada nodo representa una estacion.
 */

/* Constructora */
/** @brief Creadora por defecto
 *  \pre cierto
 *  \post El resultado es una red vacia.
 */</span>
Red<span class="operator">::</span>Red<span class="operator">() {
}</span><span class="comment">

/* Modificadoras */
/** @brief Devuelve el tiempo que hay entre la estacion con id 'id_estacion' y la estacion central.
 *  \pre id_estacion pertenece a una estacion valida.
 *  \post Retorna el tiempo entre la estacion indicada y su padre
 */</span><span class="type">
int</span> Red<span class="operator">::</span>get_tiempo_estacion<span class="operator">(</span><span class="type">int</span> id_estacion<span class="operator">)</span><span class="keyword"> const</span><span class="operator"> {</span><span class="flow">

  return</span> _estaciones<span class="operator">[</span>id_estacion<span class="operator">];
}</span><span class="comment">

/* Lectura */
/** @brief Se leen los datos de las estaciones de la red del canal estandar de entrada.
 *  \pre cierto
 *  \post Los datos del parametro implicito son los leidos de la entrada
 */</span><span class="type">
void</span> Red<span class="operator">::</span>leer_red<span class="operator">() {</span><span class="type">

  int</span> n<span class="operator"> =</span> readint<span class="operator">();</span><span class="type">
  int</span> num_estaciones<span class="operator"> = (</span><span class="int">1</span><span class="operator"> &lt;&lt;</span> n<span class="operator">) -</span><span class="int"> 1</span><span class="operator">;</span><span class="comment">  // por definicion

</span>  _estaciones<span class="operator"> =</span> vector<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;(</span>num_estaciones<span class="operator">);</span>
  Arbre<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> a<span class="operator">;</span>

  leer_red_recursivo<span class="operator">(</span>a<span class="operator">,</span> _estaciones<span class="operator">,</span><span class="int"> 0</span><span class="operator">,</span><span class="int"> 0</span><span class="operator">);
}</span><span class="comment">

/** @brief Se leen los datos de las etaciones de la red del canal estandar de entrada.
 *  Cada estacion tiene un tiempo; se debe leer la red como un arbol en preorden.
 *  \pre cierto
 *  \post Los datos del parametro implicito son los leidos de la entrada
 */</span><span class="type">

void</span> Red<span class="operator">::</span>leer_red_recursivo<span class="operator">(</span>Arbre<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>a<span class="operator">,</span> vector<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &amp;</span>estaciones<span class="operator">,</span><span class="type"> int</span> id_estacion<span class="operator">,</span><span class="type"> int</span> tiempo_acumulado<span class="operator">) {</span><span class="type">

  int</span> tiempo<span class="operator"> =</span> readint<span class="operator">();</span><span class="flow">
  if</span><span class="operator"> (</span>tiempo<span class="operator"> &gt;=</span><span class="int"> 0</span><span class="operator">) {</span>

    tiempo_acumulado<span class="operator"> +=</span> tiempo<span class="operator">;</span>
    estaciones<span class="operator">[</span>id_estacion<span class="operator">] =</span> tiempo_acumulado<span class="operator">;</span>

    Arbre<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> a1<span class="operator">,</span> a2<span class="operator">;</span>
    leer_red_recursivo<span class="operator">(</span>a1<span class="operator">,</span> estaciones<span class="operator">,</span> id_estacion<span class="operator"> *</span><span class="int"> 2</span><span class="operator"> +</span><span class="int"> 1</span><span class="operator">,</span> tiempo_acumulado<span class="operator">);</span>

    leer_red_recursivo<span class="operator">(</span>a2<span class="operator">,</span> estaciones<span class="operator">,</span> id_estacion<span class="operator"> *</span><span class="int"> 2</span><span class="operator"> +</span><span class="int"> 2</span><span class="operator">,</span> tiempo_acumulado<span class="operator">);</span>

    a<span class="operator">.</span>plantar<span class="operator">(</span>tiempo_acumulado<span class="operator">,</span> a1<span class="operator">,</span> a2<span class="operator">);
  }
}</span></pre>