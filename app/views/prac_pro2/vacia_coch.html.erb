<script type="text/javascript" language="javascript">$(function() { ajaxify('#mov'); ajaxify('#mov2'); ajaxify('#escribe_mov_coch'); ajaxify('#get_vagones'); ajaxify('#anade_vagones'); ajaxify('#anade_vagones2'); ajaxify('#saca_vagon'); adjust_overflow(); });</script>
<div style="text-align:left; padding:0px 15px 0px 15px;">
<pre><span class="comment">/** @brief Forma los trenes indicados con los vagones de las vias de las cocheras.
 *  Al terminar, las cocheras quedan sin los vagones que se utilizaron para los trenes.
 *  Los movimientos para formar los trenes se escriben en el canal estandar de salida.
 *  \pre Se garantiza que los trenes se podran formar porque todos sus vagones estan en las cocheras.
 *  \post Se han formado los trenes indicados con los vagones de las cocheras.
 */</span><span class="type">
void</span> Cjt_Cocheras<span class="operator">::</span>vacia_cocheras<span class="operator">(</span>list<span class="operator">&lt;</span>Tren<span class="operator">&gt; &amp;</span>trenes<span class="operator">) {</span>
  cout<span class="operator"> &lt;&lt;</span><span class="string"> "Movimientos para la formacion matinal"</span><span class="operator"> &lt;&lt;</span> endl<span class="operator">;</span>
  stack<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> via_auxiliar<span class="operator">;</span>
  list<span class="operator">&lt;</span>Tren<span class="operator">&gt;::</span>iterator it_t<span class="operator"> =</span> trenes<span class="operator">.</span>begin<span class="operator">();</span><span class="flow">
  while</span><span class="operator">(</span>it_t<span class="operator"> !=</span> trenes<span class="operator">.</span>end<span class="operator">()) {</span><span class="type">
    int</span> i<span class="operator">,</span> j<span class="operator">;</span>
    i<span class="operator"> =</span> j<span class="operator"> =</span><span class="int"> 0</span><span class="operator">;</span>
    list<span class="operator">&lt;</span>Movimientos<span class="operator">&gt;</span> lista_movimientos<span class="operator">;</span>
    <%= link_to('Movimientos', practica_pro2_path(:r => 'mov'), remote: true, id: 'mov', :'data-type' => :json) %> movimientos<span class="operator">(</span>_prioridades<span class="operator">[</span>i<span class="operator">] +</span><span class="int"> 1</span><span class="operator">);</span>
    vector<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> vagones<span class="operator"> = (*</span>it_t<span class="operator">).</span><%= link_to('get_vagones', practica_pro2_path(:r => 'get_vagones'), remote: true, id: 'get_vagones', :'data-type' => :json) %><span class="operator">();</span><span class="flow">
    while</span><span class="operator"> (</span>j<span class="operator"> &lt;</span> vagones<span class="operator">.</span>size<span class="operator">()) {</span><span class="flow">
      if</span><span class="operator"> (</span>_cocheras<span class="operator">[</span>_prioridades<span class="operator">[</span>i<span class="operator">]].</span><%= link_to('saca_vagon', practica_pro2_path(:r => 'saca_vagon'), remote: true, id: 'saca_vagon', :'data-type' => :json) %><span class="operator">(</span>vagones<span class="operator">[</span>j<span class="operator">],</span> via_auxiliar<span class="operator">,</span> movimientos<span class="operator">))</span> j<span class="operator">++;</span><span class="flow">
      else</span><span class="operator"> {</span>
        _cocheras<span class="operator">[</span>_prioridades<span class="operator">[</span>i<span class="operator">]].</span><%= link_to('anadir_vagones', practica_pro2_path(:r => 'anade_vagon_pila'), remote: true, id: 'anade_vagones2', :'data-type' => :json) %><span class="operator">(</span>via_auxiliar<span class="operator">);</span>
        i<span class="operator">++;</span>
        lista_movimientos<span class="operator">.</span>insert<span class="operator">(</span>lista_movimientos<span class="operator">.</span>end<span class="operator">(),</span> movimientos<span class="operator">);</span>
        movimientos<span class="operator"> =</span> <%= link_to('Movimientos', practica_pro2_path(:r => 'mov'), remote: true, id: 'mov2', :'data-type' => :json) %><span class="operator">(</span>_prioridades<span class="operator">[</span>i<span class="operator">] +</span><span class="int"> 1</span><span class="operator">);
      }
    }</span>
    _cocheras<span class="operator">[</span>_prioridades<span class="operator">[</span>i<span class="operator">]].</span><%= link_to('anadir_vagones', practica_pro2_path(:r => 'anade_vagon_pila'), remote: true, id: 'anade_vagones', :'data-type' => :json) %><span class="operator">(</span>via_auxiliar<span class="operator">);</span>
    lista_movimientos<span class="operator">.</span>insert<span class="operator">(</span>lista_movimientos<span class="operator">.</span>end<span class="operator">(),</span> movimientos<span class="operator">);</span>
    <%= link_to('escribir_movimientos', practica_pro2_path(:r => 'escribe_mov_coch'), remote: true, id: 'escribe_mov_coch', :'data-type' => :json) %><span class="operator">((*</span>it_t<span class="operator">).</span>get_id<span class="operator">(),</span> lista_movimientos<span class="operator">);
    ++</span>it_t<span class="operator">;
  }</span>
  cout<span class="operator"> &lt;&lt;</span> endl<span class="operator">;
}</span></pre>
</div>